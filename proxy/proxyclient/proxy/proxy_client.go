// Code generated by go-swagger; DO NOT EDIT.

package proxy

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new proxy API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for proxy API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	Connect(params *ConnectParams, opts ...ClientOption) (*ConnectOK, error)

	Publish(params *PublishParams, opts ...ClientOption) (*PublishOK, error)

	Refresh(params *RefreshParams, opts ...ClientOption) (*RefreshOK, error)

	RPC(params *RPCParams, opts ...ClientOption) (*RPCOK, error)

	SubRefresh(params *SubRefreshParams, opts ...ClientOption) (*SubRefreshOK, error)

	Subscribe(params *SubscribeParams, opts ...ClientOption) (*SubscribeOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
Connect calleds when a external client connects to centrifugo
*/
func (a *Client) Connect(params *ConnectParams, opts ...ClientOption) (*ConnectOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewConnectParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "connect",
		Method:             "POST",
		PathPattern:        "/api/proxy/connect",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ConnectReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ConnectOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ConnectDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
Publish calleds when a external client tries to publish into a channel
*/
func (a *Client) Publish(params *PublishParams, opts ...ClientOption) (*PublishOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPublishParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "publish",
		Method:             "POST",
		PathPattern:        "/api/proxy/publish",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PublishReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PublishOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PublishDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
Refresh calleds when a external client session is going to expire
*/
func (a *Client) Refresh(params *RefreshParams, opts ...ClientOption) (*RefreshOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRefreshParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "refresh",
		Method:             "POST",
		PathPattern:        "/api/proxy/refresh",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &RefreshReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RefreshOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*RefreshDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
RPC calleds when a client sends RPC
*/
func (a *Client) RPC(params *RPCParams, opts ...ClientOption) (*RPCOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRPCParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "rpc",
		Method:             "POST",
		PathPattern:        "/api/proxy/rpc",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &RPCReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RPCOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*RPCDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
SubRefresh calleds when a external client subscription is going to expire
*/
func (a *Client) SubRefresh(params *SubRefreshParams, opts ...ClientOption) (*SubRefreshOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSubRefreshParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "sub-refresh",
		Method:             "POST",
		PathPattern:        "/api/proxy/sub-refresh",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &SubRefreshReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SubRefreshOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*SubRefreshDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
Subscribe calleds when external clients try to subscribe on a channel
*/
func (a *Client) Subscribe(params *SubscribeParams, opts ...ClientOption) (*SubscribeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSubscribeParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "subscribe",
		Method:             "POST",
		PathPattern:        "/api/proxy/subscribe",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &SubscribeReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SubscribeOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*SubscribeDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
