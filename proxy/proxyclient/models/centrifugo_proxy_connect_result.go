// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CentrifugoProxyConnectResult centrifugo proxy connect result
//
// swagger:model CentrifugoProxyConnectResult
type CentrifugoProxyConnectResult struct {

	// b64data
	B64data string `json:"b64data,omitempty"`

	// b64info
	B64info string `json:"b64info,omitempty"`

	// caps
	Caps []*CentrifugoProxyChannelsCapability `json:"caps"`

	// channels
	Channels []string `json:"channels"`

	// data
	// Format: byte
	Data strfmt.Base64 `json:"data,omitempty"`

	// expire at
	ExpireAt string `json:"expireAt,omitempty"`

	// info
	// Format: byte
	Info strfmt.Base64 `json:"info,omitempty"`

	// meta
	// Format: byte
	Meta strfmt.Base64 `json:"meta,omitempty"`

	// subs
	Subs map[string]CentrifugoProxySubscribeOptions `json:"subs,omitempty"`

	// user
	User string `json:"user,omitempty"`
}

// Validate validates this centrifugo proxy connect result
func (m *CentrifugoProxyConnectResult) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCaps(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSubs(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CentrifugoProxyConnectResult) validateCaps(formats strfmt.Registry) error {
	if swag.IsZero(m.Caps) { // not required
		return nil
	}

	for i := 0; i < len(m.Caps); i++ {
		if swag.IsZero(m.Caps[i]) { // not required
			continue
		}

		if m.Caps[i] != nil {
			if err := m.Caps[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("caps" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("caps" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *CentrifugoProxyConnectResult) validateSubs(formats strfmt.Registry) error {
	if swag.IsZero(m.Subs) { // not required
		return nil
	}

	for k := range m.Subs {

		if err := validate.Required("subs"+"."+k, "body", m.Subs[k]); err != nil {
			return err
		}
		if val, ok := m.Subs[k]; ok {
			if err := val.Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("subs" + "." + k)
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("subs" + "." + k)
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this centrifugo proxy connect result based on the context it is used
func (m *CentrifugoProxyConnectResult) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateCaps(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSubs(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CentrifugoProxyConnectResult) contextValidateCaps(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Caps); i++ {

		if m.Caps[i] != nil {

			if swag.IsZero(m.Caps[i]) { // not required
				return nil
			}

			if err := m.Caps[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("caps" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("caps" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *CentrifugoProxyConnectResult) contextValidateSubs(ctx context.Context, formats strfmt.Registry) error {

	for k := range m.Subs {

		if val, ok := m.Subs[k]; ok {
			if err := val.ContextValidate(ctx, formats); err != nil {
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *CentrifugoProxyConnectResult) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CentrifugoProxyConnectResult) UnmarshalBinary(b []byte) error {
	var res CentrifugoProxyConnectResult
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
