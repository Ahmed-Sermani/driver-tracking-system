// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: emulationpb/emulation.proto

package emulationpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	EmulationService_StartEmulation_FullMethodName = "/emulationpb.EmulationService/StartEmulation"
)

// EmulationServiceClient is the client API for EmulationService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type EmulationServiceClient interface {
	StartEmulation(ctx context.Context, in *StartEmulationRequest, opts ...grpc.CallOption) (*StartEmulationResponse, error)
}

type emulationServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewEmulationServiceClient(cc grpc.ClientConnInterface) EmulationServiceClient {
	return &emulationServiceClient{cc}
}

func (c *emulationServiceClient) StartEmulation(ctx context.Context, in *StartEmulationRequest, opts ...grpc.CallOption) (*StartEmulationResponse, error) {
	out := new(StartEmulationResponse)
	err := c.cc.Invoke(ctx, EmulationService_StartEmulation_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EmulationServiceServer is the server API for EmulationService service.
// All implementations must embed UnimplementedEmulationServiceServer
// for forward compatibility
type EmulationServiceServer interface {
	StartEmulation(context.Context, *StartEmulationRequest) (*StartEmulationResponse, error)
	mustEmbedUnimplementedEmulationServiceServer()
}

// UnimplementedEmulationServiceServer must be embedded to have forward compatible implementations.
type UnimplementedEmulationServiceServer struct {
}

func (UnimplementedEmulationServiceServer) StartEmulation(context.Context, *StartEmulationRequest) (*StartEmulationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartEmulation not implemented")
}
func (UnimplementedEmulationServiceServer) mustEmbedUnimplementedEmulationServiceServer() {}

// UnsafeEmulationServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EmulationServiceServer will
// result in compilation errors.
type UnsafeEmulationServiceServer interface {
	mustEmbedUnimplementedEmulationServiceServer()
}

func RegisterEmulationServiceServer(s grpc.ServiceRegistrar, srv EmulationServiceServer) {
	s.RegisterService(&EmulationService_ServiceDesc, srv)
}

func _EmulationService_StartEmulation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartEmulationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmulationServiceServer).StartEmulation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EmulationService_StartEmulation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmulationServiceServer).StartEmulation(ctx, req.(*StartEmulationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// EmulationService_ServiceDesc is the grpc.ServiceDesc for EmulationService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var EmulationService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "emulationpb.EmulationService",
	HandlerType: (*EmulationServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "StartEmulation",
			Handler:    _EmulationService_StartEmulation_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "emulationpb/emulation.proto",
}
